name: Build & Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 7

  docker-build-push:
    name: Build & Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-railway:
    name: Deploy to Railway
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Railway CLI
        run: npm i -g @railway/cli

      - name: Deploy to Railway
        id: deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "‚ö†Ô∏è RAILWAY_TOKEN not set. Skipping Railway deployment."
            echo "To deploy to Railway, add RAILWAY_TOKEN to repository secrets."
            exit 0
          fi
          
          echo "üöÄ Deploying to Railway..."
          railway up --ci
          
          # Get deployment URL (if available)
          DEPLOY_URL=$(railway domain 2>/dev/null || echo "https://your-app.railway.app")
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to: $DEPLOY_URL"

  deploy-render:
    name: Deploy to Render
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Trigger Render Deploy
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          if [ -z "$RENDER_DEPLOY_HOOK" ]; then
            echo "‚ö†Ô∏è RENDER_DEPLOY_HOOK not set. Skipping Render deployment."
            exit 0
          fi
          
          echo "üöÄ Triggering Render deployment..."
          curl -X POST "$RENDER_DEPLOY_HOOK"
          echo "‚úÖ Render deployment triggered"

  deploy-fly:
    name: Deploy to Fly.io
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          if [ -z "$FLY_API_TOKEN" ]; then
            echo "‚ö†Ô∏è FLY_API_TOKEN not set. Skipping Fly.io deployment."
            exit 0
          fi
          
          echo "üöÄ Deploying to Fly.io..."
          flyctl deploy --remote-only
          echo "‚úÖ Deployed to Fly.io"

  notify:
    name: Deployment Notification
    needs: [deploy-railway, deploy-render, deploy-fly]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send deployment notification
        run: |
          echo "üì¢ Deployment workflow completed"
          echo "Railway: ${{ needs.deploy-railway.result }}"
          echo "Render: ${{ needs.deploy-render.result }}"
          echo "Fly.io: ${{ needs.deploy-fly.result }}"
